"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/broker/tradelocker";
exports.ids = ["pages/api/broker/tradelocker"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbroker%2Ftradelocker&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cbroker%5Ctradelocker.ts&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbroker%2Ftradelocker&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cbroker%5Ctradelocker.ts&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_broker_tradelocker_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\broker\\tradelocker.ts */ \"(api)/./pages/api/broker/tradelocker.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_broker_tradelocker_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_broker_tradelocker_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/broker/tradelocker\",\n        pathname: \"/api/broker/tradelocker\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_broker_tradelocker_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmJyb2tlciUyRnRyYWRlbG9ja2VyJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNicm9rZXIlNUN0cmFkZWxvY2tlci50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNpRTtBQUNqRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsNkRBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLDZEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3ZvaWQtdHJhZGluZy1wbGF0Zm9ybS8/YjQxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGJyb2tlclxcXFx0cmFkZWxvY2tlci50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2Jyb2tlci90cmFkZWxvY2tlclwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2Jyb2tlci90cmFkZWxvY2tlclwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbroker%2Ftradelocker&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cbroker%5Ctradelocker.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/tradelocker-api.ts":
/*!********************************!*\
  !*** ./lib/tradelocker-api.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TradeLockerAPI: () => (/* binding */ TradeLockerAPI)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nclass TradeLockerAPI {\n    constructor(config){\n        this.lastRequestTime = 0;\n        this.minRequestInterval = 100 // 100ms between requests\n        ;\n        this.config = config;\n        this.prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\n        this.baseUrl = config.baseUrl || \"https://api.tradelocker.com\";\n    }\n    /**\r\n   * Rate limiting helper\r\n   */ async rateLimit() {\n        const now = Date.now();\n        const timeSinceLastRequest = now - this.lastRequestTime;\n        if (timeSinceLastRequest < this.minRequestInterval) {\n            const delay = this.minRequestInterval - timeSinceLastRequest;\n            await new Promise((resolve)=>setTimeout(resolve, delay));\n        }\n        this.lastRequestTime = Date.now();\n    }\n    /**\r\n   * Enhanced error handling for bot trading\r\n   */ async handleBotTradingError(error, operation) {\n        console.error(`TradeLocker Bot Error (${operation}):`, error);\n        // Handle specific error types\n        if (error.message?.includes(\"rate limit\")) {\n            throw new Error(`Rate limit exceeded. Please wait before retrying.`);\n        }\n        if (error.message?.includes(\"insufficient margin\")) {\n            throw new Error(`Insufficient margin for trade. Check account balance.`);\n        }\n        if (error.message?.includes(\"market closed\")) {\n            throw new Error(`Market is closed. Trading not available at this time.`);\n        }\n        if (error.message?.includes(\"invalid symbol\")) {\n            throw new Error(`Invalid trading symbol. Please check symbol format.`);\n        }\n        throw new Error(`TradeLocker ${operation} failed: ${error.message}`);\n    }\n    /**\r\n   * Test connection to TradeLocker\r\n   */ async testConnection() {\n        try {\n            const response = await this.makeRequest(\"GET\", \"/v1/accounts\");\n            return response.success === true;\n        } catch (error) {\n            console.error(\"TradeLocker connection test failed:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Get account balance\r\n   */ async getBalance() {\n        try {\n            const response = await this.makeRequest(\"GET\", `/v1/accounts/${this.config.accountId}/balance`);\n            if (response.success) {\n                return response.data.map((balance)=>({\n                        currency: balance.currency,\n                        balance: parseFloat(balance.balance),\n                        equity: parseFloat(balance.equity),\n                        margin: parseFloat(balance.margin),\n                        freeMargin: parseFloat(balance.freeMargin),\n                        marginLevel: parseFloat(balance.marginLevel)\n                    }));\n            }\n            throw new Error(\"Failed to fetch balance\");\n        } catch (error) {\n            console.error(\"Error fetching TradeLocker balance:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get current price for a symbol\r\n   */ async getCurrentPrice(symbol) {\n        try {\n            await this.rateLimit();\n            const response = await this.makeRequest(\"GET\", `/v1/quotes/${symbol}`);\n            if (response.success) {\n                return parseFloat(response.data.bid);\n            }\n            throw new Error(\"Failed to fetch price\");\n        } catch (error) {\n            console.error(\"Error fetching TradeLocker price:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get historical data\r\n   */ async getHistoricalData(symbol, timeframe, limit = 100) {\n        try {\n            const response = await this.makeRequest(\"GET\", `/v1/charts/${symbol}`, {\n                timeframe,\n                limit\n            });\n            if (response.success) {\n                return response.data.map((candle)=>({\n                        timestamp: new Date(candle.timestamp),\n                        open: parseFloat(candle.open),\n                        high: parseFloat(candle.high),\n                        low: parseFloat(candle.low),\n                        close: parseFloat(candle.close),\n                        volume: parseFloat(candle.volume)\n                    }));\n            }\n            throw new Error(\"Failed to fetch historical data\");\n        } catch (error) {\n            console.error(\"Error fetching TradeLocker historical data:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Place a market order\r\n   */ async placeMarketOrder(order) {\n        try {\n            const orderData = {\n                symbol: order.symbol,\n                side: order.side,\n                type: \"market\",\n                quantity: order.quantity,\n                timeInForce: order.timeInForce || \"GTC\"\n            };\n            const response = await this.makeRequest(\"POST\", `/v1/accounts/${this.config.accountId}/orders`, orderData);\n            if (response.success) {\n                // If stop loss and take profit are specified, add them\n                if (order.stopLoss || order.takeProfit) {\n                    await this.addStopLossTakeProfit(response.data.orderId, order);\n                }\n                return {\n                    success: true,\n                    orderId: response.data.orderId,\n                    status: response.data.status,\n                    filledQuantity: response.data.filledQuantity,\n                    averagePrice: response.data.averagePrice\n                };\n            }\n            throw new Error(\"Failed to place order\");\n        } catch (error) {\n            console.error(\"Error placing TradeLocker order:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Place a limit order\r\n   */ async placeLimitOrder(order) {\n        try {\n            if (!order.price) {\n                throw new Error(\"Price is required for limit orders\");\n            }\n            const orderData = {\n                symbol: order.symbol,\n                side: order.side,\n                type: \"limit\",\n                quantity: order.quantity,\n                price: order.price,\n                timeInForce: order.timeInForce || \"GTC\"\n            };\n            const response = await this.makeRequest(\"POST\", `/v1/accounts/${this.config.accountId}/orders`, orderData);\n            if (response.success) {\n                // If stop loss and take profit are specified, add them\n                if (order.stopLoss || order.takeProfit) {\n                    await this.addStopLossTakeProfit(response.data.orderId, order);\n                }\n                return {\n                    success: true,\n                    orderId: response.data.orderId,\n                    status: response.data.status\n                };\n            }\n            throw new Error(\"Failed to place limit order\");\n        } catch (error) {\n            console.error(\"Error placing TradeLocker limit order:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Add stop loss and take profit to an existing position\r\n   */ async addStopLossTakeProfit(orderId, order) {\n        try {\n            if (order.stopLoss) {\n                await this.makeRequest(\"POST\", `/v1/accounts/${this.config.accountId}/positions/${orderId}/stop-loss`, {\n                    price: order.stopLoss\n                });\n            }\n            if (order.takeProfit) {\n                await this.makeRequest(\"POST\", `/v1/accounts/${this.config.accountId}/positions/${orderId}/take-profit`, {\n                    price: order.takeProfit\n                });\n            }\n        } catch (error) {\n            console.error(\"Error adding stop loss/take profit:\", error);\n        }\n    }\n    /**\r\n   * Close a position\r\n   */ async closePosition(symbol, quantity) {\n        try {\n            const positions = await this.getPositions();\n            const position = positions.find((p)=>p.symbol === symbol);\n            if (!position) {\n                throw new Error(\"Position not found\");\n            }\n            const closeQuantity = quantity || position.quantity;\n            const side = position.side === \"long\" ? \"sell\" : \"buy\";\n            const orderData = {\n                symbol: symbol,\n                side: side,\n                type: \"market\",\n                quantity: closeQuantity,\n                timeInForce: \"IOC\"\n            };\n            const response = await this.makeRequest(\"POST\", `/v1/accounts/${this.config.accountId}/orders`, orderData);\n            if (response.success) {\n                return {\n                    success: true,\n                    orderId: response.data.orderId,\n                    status: response.data.status,\n                    closedQuantity: closeQuantity\n                };\n            }\n            throw new Error(\"Failed to close position\");\n        } catch (error) {\n            console.error(\"Error closing TradeLocker position:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get open positions\r\n   */ async getPositions() {\n        try {\n            const response = await this.makeRequest(\"GET\", `/v1/accounts/${this.config.accountId}/positions`);\n            if (response.success) {\n                return response.data.map((position)=>({\n                        id: position.id,\n                        symbol: position.symbol,\n                        side: position.side,\n                        quantity: parseFloat(position.quantity),\n                        entryPrice: parseFloat(position.entryPrice),\n                        currentPrice: parseFloat(position.currentPrice),\n                        unrealizedPnL: parseFloat(position.unrealizedPnL),\n                        stopLoss: position.stopLoss ? parseFloat(position.stopLoss) : undefined,\n                        takeProfit: position.takeProfit ? parseFloat(position.takeProfit) : undefined,\n                        timestamp: new Date(position.timestamp)\n                    }));\n            }\n            throw new Error(\"Failed to fetch positions\");\n        } catch (error) {\n            console.error(\"Error fetching TradeLocker positions:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get order history\r\n   */ async getOrderHistory(symbol, limit = 100) {\n        try {\n            const params = new URLSearchParams();\n            if (symbol) params.append(\"symbol\", symbol);\n            params.append(\"limit\", limit.toString());\n            const response = await this.makeRequest(\"GET\", `/v1/accounts/${this.config.accountId}/orders?${params}`);\n            if (response.success) {\n                return response.data.map((order)=>({\n                        id: order.id,\n                        symbol: order.symbol,\n                        side: order.side,\n                        type: order.type,\n                        quantity: parseFloat(order.quantity),\n                        price: parseFloat(order.price),\n                        status: order.status,\n                        filledQuantity: parseFloat(order.filledQuantity),\n                        averagePrice: parseFloat(order.averagePrice),\n                        timestamp: new Date(order.timestamp)\n                    }));\n            }\n            throw new Error(\"Failed to fetch order history\");\n        } catch (error) {\n            console.error(\"Error fetching TradeLocker order history:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Cancel an order\r\n   */ async cancelOrder(orderId) {\n        try {\n            const response = await this.makeRequest(\"DELETE\", `/v1/accounts/${this.config.accountId}/orders/${orderId}`);\n            if (response.success) {\n                return {\n                    success: true,\n                    orderId: orderId,\n                    status: \"cancelled\"\n                };\n            }\n            throw new Error(\"Failed to cancel order\");\n        } catch (error) {\n            console.error(\"Error cancelling TradeLocker order:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Make authenticated request to TradeLocker API\r\n   */ async makeRequest(method, endpoint, data) {\n        const url = `${this.baseUrl}${endpoint}`;\n        const timestamp = Date.now().toString();\n        // Create signature for authentication\n        const signature = this.createSignature(method, endpoint, timestamp, data);\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"X-API-Key\": this.config.apiKey,\n            \"X-Timestamp\": timestamp,\n            \"X-Signature\": signature\n        };\n        const requestOptions = {\n            method,\n            headers\n        };\n        if (data && method !== \"GET\") {\n            requestOptions.body = JSON.stringify(data);\n        }\n        const response = await fetch(url, requestOptions);\n        const result = await response.json();\n        if (!response.ok) {\n            throw new Error(`TradeLocker API error: ${result.message || response.statusText}`);\n        }\n        return result;\n    }\n    /**\r\n   * Create signature for API authentication\r\n   */ createSignature(method, endpoint, timestamp, data) {\n        const message = `${method}${endpoint}${timestamp}${data ? JSON.stringify(data) : \"\"}`;\n        // Use crypto-js or similar library for HMAC-SHA256\n        // For now, we'll use a simple hash (you should implement proper HMAC)\n        const crypto = __webpack_require__(/*! crypto */ \"crypto\");\n        return crypto.createHmac(\"sha256\", this.config.secretKey).update(message).digest(\"hex\");\n    }\n    /**\r\n   * Save broker configuration to database\r\n   */ async saveConfig() {\n        try {\n            await this.prisma.brokerConfig.upsert({\n                where: {\n                    broker: \"tradelocker\"\n                },\n                update: {\n                    apiKey: this.config.apiKey,\n                    secretKey: this.config.secretKey,\n                    accountId: this.config.accountId,\n                    baseUrl: this.config.baseUrl,\n                    environment: this.config.environment\n                },\n                create: {\n                    broker: \"tradelocker\",\n                    apiKey: this.config.apiKey,\n                    secretKey: this.config.secretKey,\n                    accountId: this.config.accountId,\n                    baseUrl: this.config.baseUrl,\n                    environment: this.config.environment\n                }\n            });\n        } catch (error) {\n            console.error(\"Error saving TradeLocker config:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Load broker configuration from database\r\n   */ async loadConfig() {\n        try {\n            const config = await this.prisma.brokerConfig.findUnique({\n                where: {\n                    broker: \"tradelocker\"\n                }\n            });\n            if (config) {\n                this.config = {\n                    apiKey: config.apiKey,\n                    secretKey: config.secretKey,\n                    accountId: config.accountId,\n                    baseUrl: config.baseUrl,\n                    environment: config.environment\n                };\n                return this.config;\n            }\n            return null;\n        } catch (error) {\n            console.error(\"Error loading TradeLocker config:\", error);\n            return null;\n        }\n    }\n    /**\r\n   * Bot-optimized market order placement\r\n   */ async placeBotMarketOrder(order) {\n        try {\n            await this.rateLimit();\n            const orderData = {\n                symbol: order.symbol,\n                side: order.side,\n                type: \"market\",\n                quantity: order.quantity,\n                timeInForce: order.timeInForce || \"IOC\" // Immediate or Cancel for bots\n            };\n            const response = await this.makeRequest(\"POST\", `/v1/accounts/${this.config.accountId}/orders`, orderData);\n            if (response.success) {\n                // Log successful bot trade\n                console.log(`Bot Trade Executed: ${order.side} ${order.quantity} ${order.symbol} at market`);\n                // If stop loss and take profit are specified, add them\n                if (order.stopLoss || order.takeProfit) {\n                    await this.addStopLossTakeProfit(response.data.orderId, order);\n                }\n                return {\n                    success: true,\n                    orderId: response.data.orderId,\n                    status: response.data.status,\n                    filledQuantity: response.data.filledQuantity,\n                    averagePrice: response.data.averagePrice,\n                    timestamp: new Date()\n                };\n            }\n            throw new Error(\"Failed to place bot order\");\n        } catch (error) {\n            return this.handleBotTradingError(error, \"market order\");\n        }\n    }\n    /**\r\n   * Bot-optimized limit order placement\r\n   */ async placeBotLimitOrder(order) {\n        try {\n            await this.rateLimit();\n            if (!order.price) {\n                throw new Error(\"Price is required for limit orders\");\n            }\n            const orderData = {\n                symbol: order.symbol,\n                side: order.side,\n                type: \"limit\",\n                quantity: order.quantity,\n                price: order.price,\n                timeInForce: order.timeInForce || \"GTC\"\n            };\n            const response = await this.makeRequest(\"POST\", `/v1/accounts/${this.config.accountId}/orders`, orderData);\n            if (response.success) {\n                console.log(`Bot Limit Order Placed: ${order.side} ${order.quantity} ${order.symbol} at ${order.price}`);\n                if (order.stopLoss || order.takeProfit) {\n                    await this.addStopLossTakeProfit(response.data.orderId, order);\n                }\n                return {\n                    success: true,\n                    orderId: response.data.orderId,\n                    status: response.data.status,\n                    timestamp: new Date()\n                };\n            }\n            throw new Error(\"Failed to place bot limit order\");\n        } catch (error) {\n            return this.handleBotTradingError(error, \"limit order\");\n        }\n    }\n    /**\r\n   * Bot-optimized position closing\r\n   */ async closeBotPosition(symbol, quantity) {\n        try {\n            await this.rateLimit();\n            const positions = await this.getPositions();\n            const position = positions.find((p)=>p.symbol === symbol);\n            if (!position) {\n                throw new Error(\"Position not found for bot to close\");\n            }\n            const closeQuantity = quantity || position.quantity;\n            const side = position.side === \"long\" ? \"sell\" : \"buy\";\n            const orderData = {\n                symbol: symbol,\n                side: side,\n                type: \"market\",\n                quantity: closeQuantity,\n                timeInForce: \"IOC\"\n            };\n            const response = await this.makeRequest(\"POST\", `/v1/accounts/${this.config.accountId}/orders`, orderData);\n            if (response.success) {\n                console.log(`Bot Position Closed: ${closeQuantity} ${symbol}`);\n                return {\n                    success: true,\n                    orderId: response.data.orderId,\n                    status: response.data.status,\n                    closedQuantity: closeQuantity,\n                    timestamp: new Date()\n                };\n            }\n            throw new Error(\"Failed to close bot position\");\n        } catch (error) {\n            return this.handleBotTradingError(error, \"position close\");\n        }\n    }\n    /**\r\n   * Get account balance for bot risk management\r\n   */ async getBotBalance() {\n        try {\n            await this.rateLimit();\n            const response = await this.makeRequest(\"GET\", `/v1/accounts/${this.config.accountId}/balance`);\n            if (response.success) {\n                return response.data.map((balance)=>({\n                        currency: balance.currency,\n                        balance: parseFloat(balance.balance),\n                        equity: parseFloat(balance.equity),\n                        margin: parseFloat(balance.margin),\n                        freeMargin: parseFloat(balance.freeMargin),\n                        marginLevel: parseFloat(balance.marginLevel)\n                    }));\n            }\n            throw new Error(\"Failed to fetch bot balance\");\n        } catch (error) {\n            return this.handleBotTradingError(error, \"balance fetch\");\n        }\n    }\n    /**\r\n   * Check if bot can place trade (risk management)\r\n   */ async canBotTrade(symbol, quantity, side) {\n        try {\n            await this.rateLimit();\n            // Get current balance\n            const balance = await this.getBotBalance();\n            const usdBalance = balance.find((b)=>b.currency === \"USD\");\n            if (!usdBalance) {\n                console.error(\"Bot: No USD balance found\");\n                return false;\n            }\n            // Get current price\n            const currentPrice = await this.getCurrentPrice(symbol);\n            // Calculate required margin (assuming 1:100 leverage)\n            const requiredMargin = quantity * currentPrice / 100;\n            // Check if we have enough free margin\n            if (usdBalance.freeMargin < requiredMargin) {\n                console.error(`Bot: Insufficient margin. Required: ${requiredMargin}, Available: ${usdBalance.freeMargin}`);\n                return false;\n            }\n            // Check margin level (should be above 200% for safety)\n            if (usdBalance.marginLevel < 200) {\n                console.error(`Bot: Margin level too low: ${usdBalance.marginLevel}%`);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Bot: Error checking trade feasibility:\", error);\n            return false;\n        }\n    }\n    /**\r\n   * Get positions for bot monitoring\r\n   */ async getBotPositions() {\n        try {\n            await this.rateLimit();\n            const response = await this.makeRequest(\"GET\", `/v1/accounts/${this.config.accountId}/positions`);\n            if (response.success) {\n                return response.data.map((position)=>({\n                        id: position.id,\n                        symbol: position.symbol,\n                        side: position.side,\n                        quantity: parseFloat(position.quantity),\n                        entryPrice: parseFloat(position.entryPrice),\n                        currentPrice: parseFloat(position.currentPrice),\n                        unrealizedPnL: parseFloat(position.unrealizedPnL),\n                        stopLoss: position.stopLoss ? parseFloat(position.stopLoss) : undefined,\n                        takeProfit: position.takeProfit ? parseFloat(position.takeProfit) : undefined,\n                        timestamp: new Date(position.timestamp)\n                    }));\n            }\n            throw new Error(\"Failed to fetch bot positions\");\n        } catch (error) {\n            return this.handleBotTradingError(error, \"positions fetch\");\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/tradelocker-api.ts\n");

/***/ }),

/***/ "(api)/./pages/api/broker/tradelocker.ts":
/*!*****************************************!*\
  !*** ./pages/api/broker/tradelocker.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/tradelocker-api */ \"(api)/./lib/tradelocker-api.ts\");\n\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const { action, config, order } = req.body;\n        switch(action){\n            case \"connect\":\n                return await handleConnect(req, res, config);\n            case \"test\":\n                return await handleTestConnection(req, res, config);\n            case \"balance\":\n                return await handleGetBalance(req, res, config);\n            case \"price\":\n                return await handleGetPrice(req, res, config);\n            case \"market_order\":\n                return await handleMarketOrder(req, res, config, order);\n            case \"limit_order\":\n                return await handleLimitOrder(req, res, config, order);\n            case \"positions\":\n                return await handleGetPositions(req, res, config);\n            case \"close_position\":\n                return await handleClosePosition(req, res, config, order);\n            case \"order_history\":\n                return await handleGetOrderHistory(req, res, config);\n            case \"cancel_order\":\n                return await handleCancelOrder(req, res, config, order);\n            default:\n                return res.status(400).json({\n                    error: \"Invalid action\"\n                });\n        }\n    } catch (error) {\n        console.error(\"TradeLocker API error:\", error);\n        return res.status(500).json({\n            error: \"Internal server error\",\n            details: error.message\n        });\n    }\n}\nasync function handleConnect(req, res, config) {\n    try {\n        const tradelocker = new _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__.TradeLockerAPI(config);\n        // Test the connection\n        const isConnected = await tradelocker.testConnection();\n        if (!isConnected) {\n            return res.status(400).json({\n                error: \"Failed to connect to TradeLocker\"\n            });\n        }\n        // Save the configuration\n        await tradelocker.saveConfig();\n        return res.status(200).json({\n            success: true,\n            message: \"Successfully connected to TradeLocker\"\n        });\n    } catch (error) {\n        return res.status(400).json({\n            error: error.message\n        });\n    }\n}\nasync function handleTestConnection(req, res, config) {\n    try {\n        const tradelocker = new _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__.TradeLockerAPI(config);\n        const isConnected = await tradelocker.testConnection();\n        return res.status(200).json({\n            success: isConnected,\n            message: isConnected ? \"Connection successful\" : \"Connection failed\"\n        });\n    } catch (error) {\n        return res.status(400).json({\n            error: error.message\n        });\n    }\n}\nasync function handleGetBalance(req, res, config) {\n    try {\n        const tradelocker = new _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__.TradeLockerAPI(config);\n        const balance = await tradelocker.getBalance();\n        return res.status(200).json({\n            success: true,\n            data: balance\n        });\n    } catch (error) {\n        return res.status(400).json({\n            error: error.message\n        });\n    }\n}\nasync function handleGetPrice(req, res, config) {\n    try {\n        const { symbol } = req.body;\n        if (!symbol) {\n            return res.status(400).json({\n                error: \"Symbol is required\"\n            });\n        }\n        const tradelocker = new _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__.TradeLockerAPI(config);\n        const price = await tradelocker.getCurrentPrice(symbol);\n        return res.status(200).json({\n            success: true,\n            data: {\n                symbol,\n                price\n            }\n        });\n    } catch (error) {\n        return res.status(400).json({\n            error: error.message\n        });\n    }\n}\nasync function handleMarketOrder(req, res, config, order) {\n    try {\n        const { symbol, side, quantity, stopLoss, takeProfit } = order;\n        if (!symbol || !side || !quantity) {\n            return res.status(400).json({\n                error: \"Symbol, side, and quantity are required\"\n            });\n        }\n        const tradelocker = new _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__.TradeLockerAPI(config);\n        const result = await tradelocker.placeMarketOrder({\n            symbol,\n            side,\n            type: \"market\",\n            quantity: parseFloat(quantity),\n            stopLoss: stopLoss ? parseFloat(stopLoss) : undefined,\n            takeProfit: takeProfit ? parseFloat(takeProfit) : undefined\n        });\n        return res.status(200).json({\n            success: true,\n            data: result\n        });\n    } catch (error) {\n        return res.status(400).json({\n            error: error.message\n        });\n    }\n}\nasync function handleLimitOrder(req, res, config, order) {\n    try {\n        const { symbol, side, quantity, price, stopLoss, takeProfit } = order;\n        if (!symbol || !side || !quantity || !price) {\n            return res.status(400).json({\n                error: \"Symbol, side, quantity, and price are required\"\n            });\n        }\n        const tradelocker = new _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__.TradeLockerAPI(config);\n        const result = await tradelocker.placeLimitOrder({\n            symbol,\n            side,\n            type: \"limit\",\n            quantity: parseFloat(quantity),\n            price: parseFloat(price),\n            stopLoss: stopLoss ? parseFloat(stopLoss) : undefined,\n            takeProfit: takeProfit ? parseFloat(takeProfit) : undefined\n        });\n        return res.status(200).json({\n            success: true,\n            data: result\n        });\n    } catch (error) {\n        return res.status(400).json({\n            error: error.message\n        });\n    }\n}\nasync function handleGetPositions(req, res, config) {\n    try {\n        const tradelocker = new _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__.TradeLockerAPI(config);\n        const positions = await tradelocker.getPositions();\n        return res.status(200).json({\n            success: true,\n            data: positions\n        });\n    } catch (error) {\n        return res.status(400).json({\n            error: error.message\n        });\n    }\n}\nasync function handleClosePosition(req, res, config, order) {\n    try {\n        const { symbol, quantity } = order;\n        if (!symbol) {\n            return res.status(400).json({\n                error: \"Symbol is required\"\n            });\n        }\n        const tradelocker = new _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__.TradeLockerAPI(config);\n        const result = await tradelocker.closePosition(symbol, quantity ? parseFloat(quantity) : undefined);\n        return res.status(200).json({\n            success: true,\n            data: result\n        });\n    } catch (error) {\n        return res.status(400).json({\n            error: error.message\n        });\n    }\n}\nasync function handleGetOrderHistory(req, res, config) {\n    try {\n        const { symbol, limit } = req.body;\n        const tradelocker = new _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__.TradeLockerAPI(config);\n        const history = await tradelocker.getOrderHistory(symbol, limit || 100);\n        return res.status(200).json({\n            success: true,\n            data: history\n        });\n    } catch (error) {\n        return res.status(400).json({\n            error: error.message\n        });\n    }\n}\nasync function handleCancelOrder(req, res, config, order) {\n    try {\n        const { orderId } = order;\n        if (!orderId) {\n            return res.status(400).json({\n                error: \"Order ID is required\"\n            });\n        }\n        const tradelocker = new _lib_tradelocker_api__WEBPACK_IMPORTED_MODULE_0__.TradeLockerAPI(config);\n        const result = await tradelocker.cancelOrder(orderId);\n        return res.status(200).json({\n            success: true,\n            data: result\n        });\n    } catch (error) {\n        return res.status(400).json({\n            error: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/broker/tradelocker.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbroker%2Ftradelocker&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cbroker%5Ctradelocker.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();